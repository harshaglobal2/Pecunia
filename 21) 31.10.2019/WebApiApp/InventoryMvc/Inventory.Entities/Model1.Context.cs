//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class company2Entities : DbContext
    {
        public company2Entities()
            : base("name=company2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Person> Persons { get; set; }
    
        public virtual int usp_CreatePersons(Nullable<System.Guid> personID, string personName, string email, string password, Nullable<int> age, Nullable<System.DateTime> dateOfJoining, string gender, Nullable<bool> isRegistered, string state)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var dateOfJoiningParameter = dateOfJoining.HasValue ?
                new ObjectParameter("DateOfJoining", dateOfJoining) :
                new ObjectParameter("DateOfJoining", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var isRegisteredParameter = isRegistered.HasValue ?
                new ObjectParameter("IsRegistered", isRegistered) :
                new ObjectParameter("IsRegistered", typeof(bool));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreatePersons", personIDParameter, personNameParameter, emailParameter, passwordParameter, ageParameter, dateOfJoiningParameter, genderParameter, isRegisteredParameter, stateParameter);
        }
    
        public virtual int usp_DeletePerson(Nullable<System.Guid> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeletePerson", personIDParameter);
        }
    
        public virtual ObjectResult<Person> usp_GetPersonByPersonID(Nullable<System.Guid> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Person>("usp_GetPersonByPersonID", personIDParameter);
        }
    
        public virtual ObjectResult<Person> usp_GetPersonByPersonID(Nullable<System.Guid> personID, MergeOption mergeOption)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Person>("usp_GetPersonByPersonID", mergeOption, personIDParameter);
        }
    
        public virtual ObjectResult<Person> usp_GetPersons()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Person>("usp_GetPersons");
        }
    
        public virtual ObjectResult<Person> usp_GetPersons(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Person>("usp_GetPersons", mergeOption);
        }
    
        public virtual int usp_UpdatePerson(Nullable<System.Guid> personID, string personName, string email, Nullable<int> age, Nullable<System.DateTime> dateOfJoining, string gender, Nullable<bool> isRegistered, string state)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(System.Guid));
    
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var dateOfJoiningParameter = dateOfJoining.HasValue ?
                new ObjectParameter("DateOfJoining", dateOfJoining) :
                new ObjectParameter("DateOfJoining", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var isRegisteredParameter = isRegistered.HasValue ?
                new ObjectParameter("IsRegistered", isRegistered) :
                new ObjectParameter("IsRegistered", typeof(bool));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdatePerson", personIDParameter, personNameParameter, emailParameter, ageParameter, dateOfJoiningParameter, genderParameter, isRegisteredParameter, stateParameter);
        }
    }
}
